{"version":3,"file":"ng2-currency-mask.umd.js","sources":["../../../projects/ng2-currency-mask/src/lib/currency-mask.config.ts","../../../projects/ng2-currency-mask/src/lib/input.manager.ts","../../../projects/ng2-currency-mask/src/lib/input.service.ts","../../../projects/ng2-currency-mask/src/lib/input.handler.ts","../../../projects/ng2-currency-mask/src/lib/currency-mask.directive.ts","../../../projects/ng2-currency-mask/src/lib/currency-mask.module.ts","../../../projects/ng2-currency-mask/src/public-api.ts","../../../projects/ng2-currency-mask/src/ng2-currency-mask.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\n\nexport interface CurrencyMaskConfig {\n\n    align: string;\n    allowNegative: boolean;\n    decimal: string;\n    precision: number;\n    prefix: string;\n    suffix: string;\n    thousands: string;\n}\n\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");","export class InputManager {\n\n    private _storedRawValue: string;\n\n    constructor(private htmlInputElement: any) {\n    }\n\n    setCursorAt(position: number): void {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        } else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n\n    get canInputMoreNumbers(): boolean {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = (selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/)) ? true : false;\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n\n    get inputSelection(): any {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        } else {\n            let range = document.getSelection().anchorNode;\n\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                } else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    } else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n\n    get rawValue(): string {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n\n    set rawValue(value: string) {\n        this._storedRawValue = value;\n\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n\n    get storedRawValue(): string {\n        return this._storedRawValue;\n    }\n}","import { InputManager } from \"./input.manager\";\n\nexport class InputService {\n\n    private inputManager: InputManager;\n\n    constructor(private htmlInputElement: any, private options: any) {\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n\n    addNumber(keyCode: number): void {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n\n    applyMask(isNumber: boolean, rawValue: string): string {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n\n        if (!onlyNumbers) {\n            return \"\";\n        }\n\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = (rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n\n    clearMask(rawValue: string): number {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n\n        return parseFloat(value);\n    }\n\n    changeToNegative(): void {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n\n    changeToPositive(): void {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n\n    fixCursorPosition(forceToEndPosition?: boolean): void {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n\n    getRawValueWithoutSuffixEndPosition(): number {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n\n    getRawValueWithoutPrefixStartPosition(): number {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n\n    removeNumber(keyCode: number): void {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n\n            //delete key and the target digit is the decimal or thousands divider\n            if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n\n            //backspace key and the target digit is the decimal or thousands divider\n            if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n\n    updateFieldValue(selectionStart?: number): void {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n\n    updateOptions(options: any): void {\n        let value: number = this.value;\n        this.options = options;\n        this.value = value;\n    }\n\n    get canInputMoreNumbers(): boolean {\n        return this.inputManager.canInputMoreNumbers;\n    }\n\n    get inputSelection(): any {\n        return this.inputManager.inputSelection;\n    }\n\n    get rawValue(): string {\n        return this.inputManager.rawValue;\n    }\n\n    set rawValue(value: string) {\n        this.inputManager.rawValue = value;\n    }\n\n    get storedRawValue(): string {\n        return this.inputManager.storedRawValue;\n    }\n\n    get value(): number {\n        return this.clearMask(this.rawValue);\n    }\n\n    set value(value: number) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}","import { InputService } from \"./input.service\";\n\nexport class InputHandler {\n\n    private inputService: InputService;\n    private onModelChange: Function;\n    private onModelTouched: Function;\n    private htmlInputElement: HTMLInputElement;\n\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n\n    handleClick(event: any, chromeAndroid: boolean): void {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n\n    handleCut(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n\n    handleInput(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            } else {\n                this.setValue(null);\n            }\n        }\n\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeydown(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = event.which || event.charCode || event.keyCode;\n\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n\n    handleKeypress(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = event.which || event.charCode || event.keyCode;\n\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeyup(event: any): void {\n        this.inputService.fixCursorPosition();\n    }\n\n    handlePaste(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n\n    updateOptions(options: any): void {\n        this.inputService.updateOptions(options);\n    }\n\n    getOnModelChange(): Function {\n        return this.onModelChange;\n    }\n\n    setOnModelChange(callbackFunction: Function): void {\n        this.onModelChange = callbackFunction;\n    }\n\n    getOnModelTouched(): Function {\n        return this.onModelTouched;\n    }\n\n    setOnModelTouched(callbackFunction: Function) {\n        this.onModelTouched = callbackFunction;\n    }\n\n    setValue(value: number): void {\n        this.inputService.value = value;\n    }\n\n    private getNewKeyCode(oldString: string, newString: string): number {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n    }\n\n    private isArrowEndHomeKeyInFirefox(event: any) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n\n    private setCursorPosition(event: any): void {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n\n        setTimeout(function () {\n            event.target.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}","import { AfterViewInit, Directive, DoCheck, ElementRef, forwardRef, HostListener, Inject, Input, KeyValueDiffer, KeyValueDiffers, OnInit, Optional } from \"@angular/core\";\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from \"@angular/forms\";\nimport { CurrencyMaskConfig, CURRENCY_MASK_CONFIG } from \"./currency-mask.config\";\nimport { InputHandler } from \"./input.handler\";\n\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true\n};\n\n@Directive({\n    selector: \"[currencyMask]\",\n    providers: [\n        CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR,\n        { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }\n    ]\n})\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit, Validator {\n\n    @Input() max: number;\n    @Input() min: number;\n    @Input() options: any = {};\n\n    inputHandler: InputHandler;\n    keyValueDiffer: KeyValueDiffer<any, any>;\n\n    optionsTemplate = {\n        align: \"right\",\n        allowNegative: true,\n        decimal: \".\",\n        precision: 2,\n        prefix: \"$ \",\n        suffix: \"\",\n        thousands: \",\"\n    };\n\n    constructor(@Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig, private elementRef: ElementRef, private keyValueDiffers: KeyValueDiffers) {\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\n        }\n    }\n\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\n    }\n\n    @HostListener(\"blur\", [\"$event\"])\n    handleBlur(event: any) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    handleClick(event: any) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n\n    @HostListener(\"cut\", [\"$event\"])\n    handleCut(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n\n    @HostListener(\"input\", [\"$event\"])\n    handleInput(event: any) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n\n    @HostListener(\"keydown\", [\"$event\"])\n    handleKeydown(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n\n    @HostListener(\"keypress\", [\"$event\"])\n    handleKeypress(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n\n    @HostListener(\"keyup\", [\"$event\"])\n    handleKeyup(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n\n    @HostListener(\"paste\", [\"$event\"])\n    handlePaste(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n\n    isChromeAndroid(): boolean {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n\n    registerOnChange(callbackFunction: Function): void {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n\n    registerOnTouched(callbackFunction: Function): void {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n\n    setDisabledState(value: boolean): void {\n        this.elementRef.nativeElement.disabled = value;\n    }\n\n    validate(abstractControl: AbstractControl): { [key: string]: any; } {\n        let result: any = {};\n\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n\n        return result != {} ? result : null;\n    }\n\n    writeValue(value: number): void {\n        this.inputHandler.setValue(value);\n    }\n}","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CurrencyMaskDirective } from \"./currency-mask.directive\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [\n        CurrencyMaskDirective\n    ],\n    exports: [\n        CurrencyMaskDirective\n    ]\n})\nexport class CurrencyMaskModule {\n}","/*\n * Public API Surface of currency-mask\n */\n\nexport * from './lib/currency-mask.config';\nexport * from './lib/currency-mask.directive';\nexport * from './lib/currency-mask.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","NG_VALUE_ACCESSOR","forwardRef","Directive","NG_VALIDATORS","Optional","Inject","ElementRef","KeyValueDiffers","Input","HostListener","NgModule","CommonModule","FormsModule"],"mappings":";;;;;;QAaW,oBAAoB,GAAG,IAAIA,mBAAc,CAAqB,sBAAsB;;ICb/F;QAII,sBAAoB,gBAAqB;YAArB,qBAAgB,GAAhB,gBAAgB,CAAK;SACxC;QAED,kCAAW,GAAX,UAAY,QAAgB;YACxB,IAAI,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE;gBACzC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;gBAC9B,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aAC/D;iBAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE;gBAC9C,IAAI,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC;gBACxD,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACzB,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;gBACzC,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;gBAC3C,SAAS,CAAC,MAAM,EAAE,CAAC;aACtB;SACJ;QAED,2CAAoB,GAApB,UAAqB,WAAmB,EAAE,SAAiB,EAAE,cAAsB;YAC/E,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;YAC5B,IAAI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC;YACnC,cAAc,GAAG,cAAc,IAAI,SAAS,GAAG,SAAS,CAAC,CAAC;YAC1D,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;SACpC;QAED,sBAAI,6CAAmB;iBAAvB;gBACI,IAAI,sBAAsB,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;gBAChI,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;gBACxD,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;gBACpD,IAAI,kBAAkB,GAAG,CAAC,cAAc,IAAI,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC;gBAC5J,IAAI,aAAa,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;gBACzE,OAAO,sBAAsB,IAAI,kBAAkB,IAAI,aAAa,CAAC;aACxE;;;WAAA;QAED,sBAAI,wCAAc;iBAAlB;gBACI,IAAI,cAAc,GAAG,CAAC,CAAC;gBACvB,IAAI,YAAY,GAAG,CAAC,CAAC;gBAErB,IAAI,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,IAAI,QAAQ,IAAI,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,IAAI,QAAQ,EAAE;oBAClH,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC;oBACtD,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;iBACrD;qBAAM;oBACH,IAAI,KAAK,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC,UAAU,CAAC;oBAE/C,IAAI,KAAK,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,gBAAgB,EAAE;wBACpD,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC;wBAChD,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;wBACzE,IAAI,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC;wBACzD,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC;wBACvD,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAEzB,IAAI,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;4BAC1D,cAAc,GAAG,YAAY,GAAG,MAAM,CAAC;yBAC1C;6BAAM;4BACH,cAAc,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC;4BAC7D,cAAc,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;4BAElF,IAAI,UAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;gCACxD,YAAY,GAAG,MAAM,CAAC;6BACzB;iCAAM;gCACH,YAAY,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC;gCACzD,YAAY,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;6BACjF;yBACJ;qBACJ;iBACJ;gBAED,OAAO;oBACH,cAAc,EAAE,cAAc;oBAC9B,YAAY,EAAE,YAAY;iBAC7B,CAAC;aACL;;;WAAA;QAED,sBAAI,kCAAQ;iBAAZ;gBACI,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;aAC/D;iBAED,UAAa,KAAa;gBACtB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAE7B,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBACvB,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,KAAK,CAAC;iBACvC;aACJ;;;WARA;QAUD,sBAAI,wCAAc;iBAAlB;gBACI,OAAO,IAAI,CAAC,eAAe,CAAC;aAC/B;;;WAAA;2BACJ;KAAA;;ICxFD;QAII,sBAAoB,gBAAqB,EAAU,OAAY;YAA3C,qBAAgB,GAAhB,gBAAgB,CAAK;YAAU,YAAO,GAAP,OAAO,CAAK;YAC3D,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;SAC1D;QAED,gCAAS,GAAT,UAAU,OAAe;YACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;aAC9C;YAED,IAAI,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAC3C,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;YACxD,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;YACpD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACnI,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;SAC7C;QAED,gCAAS,GAAT,UAAU,QAAiB,EAAE,QAAgB;YACrC,IAAA,KAAmE,IAAI,CAAC,OAAO,EAA7E,aAAa,mBAAA,EAAE,OAAO,aAAA,EAAE,SAAS,eAAA,EAAE,MAAM,YAAA,EAAE,MAAM,YAAA,EAAE,SAAS,eAAiB,CAAC;YACpF,QAAQ,GAAG,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;YACzE,IAAI,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAElD,IAAI,CAAC,WAAW,EAAE;gBACd,OAAO,EAAE,CAAC;aACb;YAED,IAAI,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,uBAAuB,EAAE,SAAS,CAAC,CAAC;YAEvI,IAAI,WAAW,IAAI,EAAE,EAAE;gBACnB,WAAW,GAAG,GAAG,CAAC;aACrB;YAED,IAAI,WAAW,GAAG,WAAW,CAAC;YAC9B,IAAI,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;YAEpE,IAAI,SAAS,GAAG,CAAC,EAAE;gBACf,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC;gBACvE,WAAW,IAAI,OAAO,GAAG,WAAW,CAAC;aACxC;YAED,IAAI,MAAM,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,WAAW,IAAI,EAAE,CAAC,CAAC;YAC7F,IAAI,QAAQ,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,aAAa,IAAI,CAAC,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC;YACnF,OAAO,QAAQ,GAAG,MAAM,GAAG,WAAW,GAAG,MAAM,CAAC;SACnD;QAED,gCAAS,GAAT,UAAU,QAAgB;YACtB,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,EAAE,EAAE;gBACpC,OAAO,IAAI,CAAC;aACf;YAED,IAAI,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAEvF,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;gBACxB,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;aAC7E;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACtB,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;aACpD;YAED,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC5B;QAED,uCAAgB,GAAhB;YACI,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE;gBACxG,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;gBACxD,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;gBACpC,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;aAC7C;SACJ;QAED,uCAAgB,GAAhB;YACI,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;YACxD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC/C,IAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;SAC7C;QAED,wCAAiB,GAAjB,UAAkB,kBAA4B;YAC1C,IAAI,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;;YAG/D,IAAI,qBAAqB,GAAG,IAAI,CAAC,mCAAmC,EAAE,IAAI,kBAAkB,EAAE;gBAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,mCAAmC,EAAE,CAAC,CAAC;;aAE7E;iBAAM,IAAI,qBAAqB,GAAG,IAAI,CAAC,qCAAqC,EAAE,EAAE;gBAC7E,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,qCAAqC,EAAE,CAAC,CAAC;aAC/E;SACJ;QAED,0DAAmC,GAAnC;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;SAC5D;QAED,4DAAqC,GAArC;YACI,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;SAC7G;QAED,mCAAY,GAAZ,UAAa,OAAe;YACpB,IAAA,KAAyB,IAAI,CAAC,OAAO,EAAnC,OAAO,aAAA,EAAE,SAAS,eAAiB,CAAC;YAC1C,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;YACpD,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;YAExD,IAAI,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE;gBACpE,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;gBACjE,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;aACtE;;YAGD,IAAI,YAAY,IAAI,cAAc,EAAE;;gBAEhC,IAAI,CAAC,OAAO,IAAI,EAAE,IAAI,OAAO,IAAI,KAAK,KAAK,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC,EAAE;oBAChH,YAAY,GAAG,YAAY,GAAG,CAAC,CAAC;iBACnC;;gBAGD,IAAI,CAAC,OAAO,IAAI,EAAE,IAAI,OAAO,IAAI,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,YAAY,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,YAAY,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,EAAE;oBACzL,YAAY,GAAG,YAAY,GAAG,CAAC,CAAC;oBAChC,cAAc,GAAG,cAAc,GAAG,CAAC,CAAC;iBACvC;;gBAGD,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC,EAAE;oBACzF,cAAc,GAAG,cAAc,GAAG,CAAC,CAAC;iBACvC;;gBAGD,IAAI,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,EAAE,YAAY,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,EAAE,YAAY,CAAC,IAAI,SAAS,CAAC,EAAE;oBAClK,cAAc,GAAG,cAAc,GAAG,CAAC,CAAC;oBACpC,YAAY,GAAG,YAAY,GAAG,CAAC,CAAC;iBACnC;aACJ;YAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACzH,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;SACzC;QAED,uCAAgB,GAAhB,UAAiB,cAAuB;YACpC,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;YAC7D,cAAc,GAAG,cAAc,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,cAAc,CAAC;YACrF,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;SAC7F;QAED,oCAAa,GAAb,UAAc,OAAY;YACtB,IAAI,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;QAED,sBAAI,6CAAmB;iBAAvB;gBACI,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC;aAChD;;;WAAA;QAED,sBAAI,wCAAc;iBAAlB;gBACI,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;aAC3C;;;WAAA;QAED,sBAAI,kCAAQ;iBAAZ;gBACI,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;aACrC;iBAED,UAAa,KAAa;gBACtB,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,KAAK,CAAC;aACtC;;;WAJA;QAMD,sBAAI,wCAAc;iBAAlB;gBACI,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;aAC3C;;;WAAA;QAED,sBAAI,+BAAK;iBAAT;gBACI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACxC;iBAED,UAAU,KAAa;gBACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC;aACpD;;;WAJA;2BAKJ;KAAA;;IClLD;QAOI,sBAAY,gBAAkC,EAAE,OAAY;YACxD,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YAChE,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;SAC5C;QAED,kCAAW,GAAX,UAAY,KAAU,EAAE,aAAsB;YAC1C,IAAI,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;;YAGrI,IAAI,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;gBAC9D,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;aACtD;SACJ;QAED,gCAAS,GAAT,UAAU,KAAU;YAApB,iBAUC;YATG,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,OAAO;aACV;YAED,UAAU,CAAC;gBACP,KAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;gBACrC,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACvC,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC/C,EAAE,CAAC,CAAC,CAAC;SACT;QAED,kCAAW,GAAX,UAAY,KAAU;YAClB,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,OAAO;aACV;YAED,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC/F,IAAI,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YACvD,IAAI,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,YAAY,CAAC;YACzE,IAAI,gCAAgC,GAAG,IAAI,CAAC,YAAY,CAAC,mCAAmC,EAAE,CAAC;YAC/F,IAAI,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC;YACnE,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YAE9D,IAAI,CAAC,oBAAoB,IAAI,gCAAgC,IAAI,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,oBAAoB,CAAC,IAAI,CAAC,KAAK,oBAAoB,IAAI,CAAC,EAAE;gBACjJ,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAC9B,OAAO;aACV;YAED,IAAI,cAAc,GAAG,oBAAoB,EAAE;gBACvC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,EAAE;oBAC9B,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;iBACrC;qBAAM;oBACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBACvB;aACJ;YAED,IAAI,cAAc,GAAG,oBAAoB,EAAE;gBACvC,QAAQ,OAAO;oBACX,KAAK,EAAE;wBACH,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;wBACrC,MAAM;oBACV,KAAK,EAAE;wBACH,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;wBACrC,MAAM;oBACV;wBACI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,KAAK,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE;4BAChI,OAAO;yBACV;wBAED,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;iBAC5C;aACJ;YAED,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAC/C;QAED,oCAAa,GAAb,UAAc,KAAU;YACpB,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,OAAO;aACV;YAED,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC;YAE7D,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,IAAI,EAAE,IAAI,OAAO,IAAI,KAAK,EAAE;gBACnD,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,IAAI,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;gBAErI,IAAI,oBAAoB,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,EAAE;oBAC3F,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACpB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBAC/C;gBAED,IAAI,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC9D,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBACxC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBAC/C;gBAED,IAAI,CAAC,OAAO,KAAK,CAAC,IAAI,OAAO,KAAK,EAAE,KAAK,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBACnG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBACxC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBAC/C;aACJ;SACJ;QAED,qCAAc,GAAd,UAAe,KAAU;YACrB,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,OAAO;aACV;YAED,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC;YAE7D,IAAI,OAAO,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,EAAE;gBAClG,OAAO;aACV;YAED,QAAQ,OAAO;gBACX,KAAK,EAAE;oBACH,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;oBACrC,MAAM;gBACV,KAAK,EAAE;oBACH,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;oBACrC,MAAM;gBACV;oBACI,IAAI,IAAI,CAAC,YAAY,CAAC,mBAAmB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE;wBAChI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;qBACxC;aACR;YAED,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAC/C;QAED,kCAAW,GAAX,UAAY,KAAU;YAClB,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;SACzC;QAED,kCAAW,GAAX,UAAY,KAAU;YAAtB,iBAUC;YATG,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,OAAO;aACV;YAED,UAAU,CAAC;gBACP,KAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;gBACrC,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACvC,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC/C,EAAE,CAAC,CAAC,CAAC;SACT;QAED,oCAAa,GAAb,UAAc,OAAY;YACtB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SAC5C;QAED,uCAAgB,GAAhB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC;SAC7B;QAED,uCAAgB,GAAhB,UAAiB,gBAA0B;YACvC,IAAI,CAAC,aAAa,GAAG,gBAAgB,CAAC;SACzC;QAED,wCAAiB,GAAjB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;SAC9B;QAED,wCAAiB,GAAjB,UAAkB,gBAA0B;YACxC,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC;SAC1C;QAED,+BAAQ,GAAR,UAAS,KAAa;YAClB,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;SACnC;QAEO,oCAAa,GAAb,UAAc,SAAiB,EAAE,SAAiB;YACtD,IAAI,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE;gBACrC,OAAO,IAAI,CAAC;aACf;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;oBACvD,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBAClC;aACJ;SACJ;QAEO,iDAA0B,GAA1B,UAA2B,KAAU;YACzC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,QAAQ,IAAI,SAAS,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,EAAE;gBAC/G,OAAO,IAAI,CAAC;aACf;YAED,OAAO,KAAK,CAAC;SAChB;QAEO,iCAAU,GAAV;YACJ,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;SAClE;QAEO,wCAAiB,GAAjB,UAAkB,KAAU;YAChC,IAAI,gCAAgC,GAAG,IAAI,CAAC,YAAY,CAAC,mCAAmC,EAAE,CAAC;YAE/F,UAAU,CAAC;gBACP,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,gCAAgC,EAAE,gCAAgC,CAAC,CAAC;aACtG,EAAE,CAAC,CAAC,CAAC;SACT;2BACJ;KAAA;;QC3MY,oCAAoC,GAAQ;QACrD,OAAO,EAAEC,uBAAiB;QAC1B,WAAW,EAAEC,eAAU,CAAC,cAAM,OAAA,qBAAqB,GAAA,CAAC;QACpD,KAAK,EAAE,IAAI;MACb;;QA4BE,+BAA8D,kBAAsC,EAAU,UAAsB,EAAU,eAAgC;YAAhH,uBAAkB,GAAlB,kBAAkB,CAAoB;YAAU,eAAU,GAAV,UAAU,CAAY;YAAU,oBAAe,GAAf,eAAe,CAAiB;YAfrK,YAAO,GAAQ,EAAE,CAAC;YAK3B,oBAAe,GAAG;gBACd,KAAK,EAAE,OAAO;gBACd,aAAa,EAAE,IAAI;gBACnB,OAAO,EAAE,GAAG;gBACZ,SAAS,EAAE,CAAC;gBACZ,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,EAAE;gBACV,SAAS,EAAE,GAAG;aACjB,CAAC;YAGE,IAAI,kBAAkB,EAAE;gBACpB,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC;aAC7C;YAED,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;SAC3D;QAED,+CAAe,GAAf;YACI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;SACxH;QAED,yCAAS,GAAT;YACI,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBACxC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;gBACrH,IAAI,CAAC,YAAY,CAAC,aAAa,CAAO,MAAO,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;aACjG;SACJ;QAED,wCAAQ,GAAR;YACI,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAQ,MAAO,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SACrI;QAGD,0CAAU,GAAV,UAAW,KAAU;YACjB,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACtD;QAGD,2CAAW,GAAX,UAAY,KAAU;YAClB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;SAChE;QAGD,yCAAS,GAAT,UAAU,KAAU;YAChB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;gBACzB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACtC;SACJ;QAGD,2CAAW,GAAX,UAAY,KAAU;YAClB,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;gBACxB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACxC;SACJ;QAGD,6CAAa,GAAb,UAAc,KAAU;YACpB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;gBACzB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC1C;SACJ;QAGD,8CAAc,GAAd,UAAe,KAAU;YACrB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;gBACzB,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;aAC3C;SACJ;QAGD,2CAAW,GAAX,UAAY,KAAU;YAClB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;gBACzB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACxC;SACJ;QAGD,2CAAW,GAAX,UAAY,KAAU;YAClB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;gBACzB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACxC;SACJ;QAED,+CAAe,GAAf;YACI,OAAO,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;SACtF;QAED,gDAAgB,GAAhB,UAAiB,gBAA0B;YACvC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;SACxD;QAED,iDAAiB,GAAjB,UAAkB,gBAA0B;YACxC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;SACzD;QAED,gDAAgB,GAAhB,UAAiB,KAAc;YAC3B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,GAAG,KAAK,CAAC;SAClD;QAED,wCAAQ,GAAR,UAAS,eAAgC;YACrC,IAAI,MAAM,GAAQ,EAAE,CAAC;YAErB,IAAI,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE;gBAClC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC;aACrB;YAED,IAAI,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE;gBAClC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC;aACrB;YAED,OAAO,MAAM,IAAI,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC;SACvC;QAED,0CAAU,GAAV,UAAW,KAAa;YACpB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACrC;;;;gBArIJC,cAAS,SAAC;oBACP,QAAQ,EAAE,gBAAgB;oBAC1B,SAAS,EAAE;wBACP,oCAAoC;wBACpC,EAAE,OAAO,EAAEC,mBAAa,EAAE,WAAW,EAAE,qBAAqB,EAAE,KAAK,EAAE,IAAI,EAAE;qBAC9E;iBACJ;;;gDAoBgBC,aAAQ,YAAIC,WAAM,SAAC,oBAAoB;gBArCZC,eAAU;gBAA2DC,oBAAe;;;sBAoB3HC,UAAK;sBACLA,UAAK;0BACLA,UAAK;6BAsCLC,iBAAY,SAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;8BAK/BA,iBAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;4BAKhCA,iBAAY,SAAC,KAAK,EAAE,CAAC,QAAQ,CAAC;8BAO9BA,iBAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;gCAOhCA,iBAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;iCAOlCA,iBAAY,SAAC,UAAU,EAAE,CAAC,QAAQ,CAAC;8BAOnCA,iBAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;8BAOhCA,iBAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;;QCxFrC;;;;;gBAZCC,aAAQ,SAAC;oBACN,OAAO,EAAE;wBACLC,mBAAY;wBACZC,iBAAW;qBACd;oBACD,YAAY,EAAE;wBACV,qBAAqB;qBACxB;oBACD,OAAO,EAAE;wBACL,qBAAqB;qBACxB;iBACJ;;;IChBD;;;;ICAA;;;;;;;;;;;;;;;;;"}